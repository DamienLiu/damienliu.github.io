<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rest Apis on Home</title>
    <link>https://damienliu.github.io/tags/rest-apis/</link>
    <description>Recent content in Rest Apis on Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Feb 2018 12:41:05 -0500</lastBuildDate>
    
	<atom:link href="https://damienliu.github.io/tags/rest-apis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>&#34;康富智慧租赁业务平台&#34; 项目</title>
      <link>https://damienliu.github.io/projects/creations/bosh-agents/</link>
      <pubDate>Sun, 11 Feb 2018 12:41:05 -0500</pubDate>
      
      <guid>https://damienliu.github.io/projects/creations/bosh-agents/</guid>
      <description>&amp;ldquo;康富智慧租赁业务平台&amp;rdquo; 服务于融资租赁公司的实际生产业务，业务范围涵盖广，从基础档案的录入管理，客户信息管理，报价测算，立项管理，合同管理这些租前业务，到收付款管理，档案管理，合同结清管理，诉讼管理等租后业务，每一步工作流都进行了精心的细化开发。本人负责了系统的客户管理、档案管理及诉讼管理模块的前后端开发。  项目采取了前后端分离式的开发，后端搭建JavaEE接口，供前端调用。前端语言使用时新的vue.js，使用美观简洁的Element-ui控件库。前后端采用RESTFul APIs进行通讯，各自运行，提高了开发效率，减少了后端服务器的负载压力。并且后端接口可以重用，方便系统日后的对app端的拓展。 项目采用了SSM架构和多种优秀的中间件及系统框架，并结合当下热门的微服务（SOA）架构，将系统运行所需要的诸如单点登陆、编码生产、文档打印等服务解耦出去作为微服务，通过Nginx的反向代理和Dubbo的远程调用去消费。为了提高响应效率，对于一些档案类的数据，系统使用了Redis进行缓存。另外，为了保证系统的扩展性和可集群性，项目采用了RabbitMQ作为消息队列。</description>
    </item>
    
    <item>
      <title>中集渠道授信业务改造系统</title>
      <link>https://damienliu.github.io/projects/creations/marketplace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://damienliu.github.io/projects/creations/marketplace/</guid>
      <description>&amp;ldquo;中集渠道授信业务改造系统&amp;rdquo; 服务于融资租赁公司的渠道和经销商业务，包含了客户、项目、报价、合同、文档等功能模块，是NC系统至FC系统的一次新的尝试，并且还有向app端再次扩展的计划，目前web端项目已推进至上线前的最后UAT测试阶段，而app端后台接口也已开发完毕。本人在项目中扮演的角色是负责客户和项目两大模块的前后端开发工作，和这两块即将准备推进的app接口的开发。  项目采用双数据源（Oracle/MySQL）进行数据的管理，将业务数据存储于性能更加强大、更加安全的Oracle数据库中，而在MySQL数据库中则存储元数据设计、页面配置等系统数据，业务数据和系统数据分离，使之更易于管理。 前后端分离开发依旧是本次项目遵循的开发方式，便于定位问题并解决问题，也因为前后端的开发互不影响，提高了开发效率。 本项目采取的和康富一致的技术栈，采用Spring的数据库连接池和事务配置，对双数据源进行了有效的管理；对于微服务的调用，采取了Dubbo的RPC方式。并且使用RabbitMQ进行了消息队列的管理，提高了系统的可集群性能。</description>
    </item>
    
  </channel>
</rss>